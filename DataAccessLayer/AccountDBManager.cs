using Emarket.Models;
using Emarket.ViewModels.Account;
using System;
using System.Linq;

namespace Emarket.DataAccessLayer
{
    public class AccountDBManager
    {
        private readonly EmarketDataContext dataBase;

        public AccountDBManager()
        {
            dataBase = new EmarketDataContext();
        }

        public string SignUpNewUser(SignUpViewModel newAccountData)
        {
            string newUserUsername = GetAutoGeneratedUserName(newAccountData.Name, newAccountData.Surname);

            UserAccount newUserAccount = new UserAccount(newAccountData.Name,
                                                         newAccountData.Surname,
                                                         newAccountData.Birthdate.Date.ToString("dd-MM-yyyy"),
                                                         newUserUsername,
                                                         newAccountData.Email,
                                                         newAccountData.Password
                                                        );

            dataBase.UserAccounts.InsertOnSubmit(newUserAccount);
            dataBase.SubmitChanges();

            return newUserUsername;
        }

        private string GetAutoGeneratedUserName(string name, string surname)
        {
            return name + surname + GetCountOfPeopleWithThisName(name, surname).ToString();
        }

        private int GetCountOfPeopleWithThisName(string name, string surname)
        {
            return dataBase.UserAccounts.Where(userAccount => userAccount.name == name && userAccount.surname == surname)
                                        .Count();
        }

        public bool VerifiedTheCredentialsAreCorrect(string username, string password)
        {
            return 1 == dataBase.UserAccounts.Where(userAccount =>
                                                    userAccount.username == username && 
                                                    userAccount.password == password
                                                   )
                                             .Count();
        }

        public bool VerifiedTheCredentialsAreCorrect(RecoverPasswordViewModel credentials)
        {
            return 1 == dataBase.UserAccounts.Where(userAccount =>
                                                    userAccount.username == credentials.Username &&
                                                    userAccount.email == credentials.Email
                                                    )
                                             .Count();
        }

        public string GetUserPasswordBy(string username)
        {
            return dataBase.UserAccounts.First(userAccount => userAccount.username == username).password;
        }

        public void ChangePassword(ChangePasswordViewModel accountDataNeeded)
        {
            dataBase.UserAccounts.First(userAccount =>
                                        userAccount.username == accountDataNeeded.Username &&
                                        userAccount.password == accountDataNeeded.Password
                                        )
                                 .password = accountDataNeeded.NewPassword;

            dataBase.SubmitChanges();
        }
    }
}